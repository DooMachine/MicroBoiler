version: 0.1
name: ExampleApp
servers: 
   - nginx_instance_v1:
      type: nginx  # required (default)
      name : myNginxServer # required
      ports: [80,443] # Default HTTP and HTTPS ports
      config: # example (default) root config 
        worker_processes: '1'
        events:
          worker_connections: '1024'
        http:
          gzip: 'on'
          gzip_http_version: '1.0'
          gzip_comp_level: '2'
          gzip_min_length: '1100'
          gzip_buffers : '4 8k'
          gzip_proxied: 'expired no-cache no-store private auth'
          gzip_disable: '"MSIE [1-6]\."'
          gzip_vary: 'on'

databases:
   - postgresql_instance_v1:
      type: postgresql
      name: postgre_name
      ports: [6379]
      username: doom
      password: machine
      docker_compose_override: # optional (default values) set yours to override
        image: postgres
        container_name: my_postgre_container
        environment:
          - POSTGRES_DB=dev
   - mongodb_instance:
      type: mongodb
      name: MyMongoDb
      ports: [27017]
      username: doom
      password: machine
      docker_compose_override: # optional (default values) set yours to override
        image: mongo:latest
        container_name: my_mongodb_container
        environment:
          - MONGO_DATA_DIR=/data/db
          - MONGO_LOG_DIR=/dev/null
   - mysql_instance:
      type: mysql # required
      name: my_mysql_server # required
      ports: [3306] # default port
      username: doom # default username
      password: machine # default username
      docker_compose_override: # optional (default values below)
        container_name: mysqlc
        command: mysqld --user=root --verbose
        environment:
          MYSQL_ROOT_HOST: "%"
          MYSQL_ALLOW_EMPTY_PASSWORD: "false"
   - redis_instance_v1:
      name: my_redis
      type: redis
      user: 
        username: doom
        password: machine
      ports: [6379]
eventbus:
   - rabbitmq_instance_v1:
      type: rabbitmq # required
      name: rabbit_name # required
      docker_compose_override: # defalt docker override options
        image: rabbitmq:3-management-alpine
        container_name: rabbitmqc
        #volumes:
        #  - rabbit-volume:/var/lib/rabbitmq
        ports:
          - "15672:15672"
          - "5672:5672"
          - "5671:5671"
        environment:
          RABBITMQ_DEFAULT_PASS=machine
          RABBITMQ_DEFAULT_USER=doom
identity_services:
   - identityserver_v1:
      type: identityserver4
      name: myIdentityService
      eventbus: 
        provider: rabbit_name
      port: 5000
      server: 
        provider: myNginxServer
      logging: serilog
      user_auth: aspnet_identity # only option
      database: # required
        provider: postgre_name # required
api_services: 
  # - foo_api:
  #    type: dotnet_web_api
  #    name: myFooApi
  #    swagger: false
  #    eventbus: # optional
  #      provider: rabbit_name # required
  #    authorization: # optional
  #      issuer: myIdentityService # required
  #      secrets: 
  #        - "myIdentityService_foo_secret"
  #      avaliable_scopes: 
  #       - "foo_api_fullaccess"
  #    #database: 
  #    #  provider: postgre_name
  #    #  database_name: foo_api_db
  #    #  create_database: true
  #    cache: # optional
  #      type: memory # required
  #    ports: [7000] # optional (random if not set)
  #    server: 
  #      provider: myNginxServer # optional
  #    logging: serilog
   - node_foo_api:
      type: node_web_api
      name: MyNodeFooApi
      database: 
        provider: MyMongoDb
        database_name: node_web_api_Db
      cache:
        type: redis 
        redis_options: 
          redis_server: my_redis
          redis_instance_name: master
      eventbus: 
        provider: rabbit_name
      port: 5500
      server: 
        provider: myNginxServer 
      logging: morgan
      authorization:
        issuer: myIdentityService
        secrets: 
          - "myIdentityService_node_foo_secret"
        avaliable_scopes:
         - "node_foo_api_read"
         - "node_foo_api_write"
         - "node_foo_api_fullaccess"
        user_claims: # claims that is avaliable for user profile
         - "sub"
         - "updated_at"
         - "iat"
         - "amr"
         - "sid"
         - "jti"
         - "client_id"
         - "scope"
         - "role"
         - "id"
         - "exp"
         - "aud"
         - "name"
         - "given_name"
         - "family_name"
         - "middle_name"
         - "nickname"
         - "preferred_username"
         - "profile"
         - "picture"
         - "email_verified"
         - "email"
   - bar_api:
      type: dotnet_web_api
      name: MyBarApi
      swagger: true
      database: 
        provider: my_mysql_server
        database_name: bar_api_db
      cache:
        type: redis 
        redis_options: 
          redis_server: my_redis
          redis_instance_name: master
      eventbus: 
        provider: rabbit_name
      port: 8000
      server: 
        provider: myNginxServer 
      logging: serilog
      authorization:
        issuer: myIdentityService
        secrets: 
          - "myIdentityService_bar_secret"
        avaliable_scopes:
         - "bar_api_read"
         - "bar_api_write"
         - "bar_api_fullaccess"
        user_claims: # claims that is avaliable for user profile
         - "sub"
         - "updated_at"
         - "iat"
         - "amr"
         - "sid"
         - "jti"
         - "client_id"
         - "scope"
         - "role"
         - "id"
         - "exp"
         - "aud"
         - "name"
         - "given_name"
         - "family_name"
         - "middle_name"
         - "nickname"
         - "preferred_username"
         - "profile"
         - "picture"
         - "email_verified"
         - "email"
clients: 
   - web_1:
      type: angular_cli_6_ssr
      name: myAngularClient
      add_npm_packages:
       - name: '@ngrx/store'
         version: '6.0.1'
      authorization: # using angular-oidc-client library
        issuer: myIdentityService
        scopes: 
         - openid
         - email
         - profile
         - bar_api_fullaccess
      port: 4200
      server: 
        provider: myNginxServer # optional
  #  - web_2:
  #     type: web_react_16
  #     name: myReactClient
  #     authorization: # using angular-oidc-client library
  #       issuer: myIdentityService
  #       scopes: 
  #        - openid
  #        - email
  #        - profile
  #        - foo_api_fullaccess
  #        - bar_api_readonly
  #     port: 4100
  #     server: 
  #       provider: myNginxServer # optional

      