version: 0.1
name: ExampleApp
servers: 
   - nginx_instance_v1:
      type: nginx
      name : myNginxServer
      ports: [80,443] # Default HTTP and HTTPS ports
      config: # example (default) config
        worker-process: '1'
        events:
          worker-connections: '1024'
        http:
          gzip: 'on'
          gzip_http_version: '1.0'
          gzip_comp_level: '2'
          gzip_min_length: '1100'
          gzip_buffers : '4 8k'
          gzip_proxied: 'expired no-cache no-store private auth'
          gzip_disable: '"MSIE [1-6]\."'
          gzip_vary: 'on'

databases:
   - postgresql_instance_v1:
      type: postgresql
      name: postgre_name
      ports: [6379]
      docker_compose_set: # optional (default values)
        image: postgres
        container_name: my_postgre_container
        volumes:
           - ./postgres-data:/var/lib/postgresql/data
        environment:
          POSTGRES_PASSWORD: machine
          POSTGRES_USER: doom
          POSTGRES_DB: dev
   - mysql_instance:
      type: mysql
      name: my_mysql_server
      ports: [3306] # default port
      docker_compose_set: # optional (default values below)
        container_name: mysqlc
        command: mysqld --user=root --verbose
        environment:
          MYSQL_USER: "doom"
          MYSQL_PASSWORD: "machine"
          MYSQL_ROOT_HOST: "%"
          MYSQL_ROOT_PASSWORD: "machine"
          MYSQL_ALLOW_EMPTY_PASSWORD: "false"
   - redis_instance_v1:
      name: my_redis
      type: redis
      user: 
        username: doom
        password: machine
      ports: [6379]
eventbus:
   - rabbitmq_instance_v1:
      type: rabbitmq
      name: rabbit_name
      docker_compose_set:
        image: rabbitmq:3-management-alpine
        container_name: rabbitmqc
        volumes:
          - rabbit-volume:/var/lib/rabbitmq
        ports:
          - 15672
          - 5672
          - 5671
        environment:
          RABBITMQ_DEFAULT_PASS: machine
          RABBITMQ_DEFAULT_USER: doom
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:15672"]
          interval: 30s
          timeout: 10s
          retries: 5  
identity_services:
   - identityserver_v1:
      type: identityserver4
      name: myIdentityService
      eventbus: 
        bus: rabbit_name
        with: masstransit
      ports: [5000]
      server: myNginxServer
      docker_options:
        build: in_container # OR in_dev_machine(copy publish directory)
      logging: serilog
      database: 
        provider: postgre_name
        database_name: my_identity_db
        create_database: true
        create_admin_account: true
        admin_account:
          email: admin@admin.com
          password: DooMachine-1
          roles:
           - superadmin
           - admin
api_services: 
   - foo_api:
      type: dotnet_web_api
      name: myFooApi
      docker_options:
        build: build_container # OR build_dev (copy publish directory)
      eventbus: 
        bus_instance: rabbit_name
        implement_with: masstransit
      authorization:
        issuer: myIdentityService
        api_secret: myIdentityService_secret
        avaliable_scopes:
         - openid
         - profile
         - email
         - foo_api_read
         - foo_api_write
         - foo_api_fullaccess
      database: 
        provider: postgre_name
        database_name: foo_api_db
        create_database: true
      cache:
        type: memory
      ports: [7000]
      server: myNginxServer
      logging: serilog
   - bar_api:
      type: dotnet_web_api
      name: MyBarApi
      authorization:
        issuer: myIdentityService
        secret: myIdentityService_bar_secret
        avaliable_scopes:
         - openid
         - profile
         - email
         - foo_api_read
         - foo_api_write
         - foo_api_fullaccess
      database: 
        provider: postgre_name
        database_name: bar_api_db
        context_name: BarApiContext
        create_database: true
      cache:
        type: redis
        redis_options: 
          redis_server: my_redis
          redis_instance_name: master
      eventbus: 
        bus_instance: rabbit_name
      ports: [8000]
      server: myNginxServer
      logging: serilog
clients: 
   - web_1:
      type: angular
      name: myAngularClient
      add_npm_packages:
       - name: '@ngrx/store'
         version: '6.0.1'
      identity: # using angular-oidc-client library
        issuer: identityserver_v1
        flow: implicit
        scopes: 
         - openid
         - profile
         - foo_api_fullaccess
         - bar_api_readonly
      ports: [4200]
      server: myNginxServer

      