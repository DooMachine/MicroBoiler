version: 0.1
name: ExampleApp
dotnet_class_libs:
  - core:
      name: ExampleApp.Core # required
      framework: netstandard1.3 # default (netstandard2.0)
  - events_core:
      name: ExampleApp.EventCore
      framework: netstandard2.0
servers: 
   - nginx_instance_v1:
      type: nginx  # required (default)
      name : myNginxServer # required
      ports: [80,443] # Default HTTP and HTTPS ports
      config: # example (default) config 
        worker-process: '1'
        events:
          worker-connections: '1024'
        http:
          gzip: 'on'
          gzip_http_version: '1.0'
          gzip_comp_level: '2'
          gzip_min_length: '1100'
          gzip_buffers : '4 8k'
          gzip_proxied: 'expired no-cache no-store private auth'
          gzip_disable: '"MSIE [1-6]\."'
          gzip_vary: 'on'

databases:
   - postgresql_instance_v1:
      type: postgresql
      name: postgre_name
      ports: [6379]
      docker_compose_set: # optional (default values) set yours to override
        image: postgres
        container_name: my_postgre_container
        volumes:
           - ./postgres-data:/var/lib/postgresql/data
        environment:
          POSTGRES_PASSWORD: machine
          POSTGRES_USER: doom
          POSTGRES_DB: dev
   - mysql_instance:
      type: mysql # required
      name: my_mysql_server # required
      ports: [3306] # default port
      docker_compose_set: # optional (default values below)
        container_name: mysqlc
        command: mysqld --user=root --verbose
        environment:
          MYSQL_USER: "doom"
          MYSQL_PASSWORD: "machine"
          MYSQL_ROOT_HOST: "%"
          MYSQL_ROOT_PASSWORD: "machine"
          MYSQL_ALLOW_EMPTY_PASSWORD: "false"
   - redis_instance_v1:
      name: my_redis
      type: redis
      user: 
        username: doom
        password: machine
      ports: [6379]
eventbus:
   - rabbitmq_instance_v1:
      type: rabbitmq # required
      name: rabbit_name # required
      docker_compose_set: # defalt docker override options
        image: rabbitmq:3-management-alpine
        container_name: rabbitmqc
        volumes:
          - rabbit-volume:/var/lib/rabbitmq
        ports:
          - "15672:15672"
          - "5672:5672"
          - "5671:5671"
        environment:
          RABBITMQ_DEFAULT_PASS: machine
          RABBITMQ_DEFAULT_USER: doom
identity_services:
   - identityserver_v1:
      type: identityserver4
      name: myIdentityService
      eventbus: 
        provider: rabbit_name
      ports: [5000]
      server: 
        provider: myNginxServer
      logging: serilog
      user_auth: aspnet_identity # only option
      database: # required
        provider: postgre_name # required
api_services: 
   - foo_api:
      type: dotnet_web_api
      name: myFooApi
      swagger: false
      eventbus: # optional
        provider: rabbit_name # required
      authorization: # optional
        issuer: myIdentityService # required
        api_secret: myIdentityService_secret # optional
        avaliable_scopes: # openid, profile , email default values
         - "openid"
         - "profile"
         - "email"
         - "foo_api_fullaccess"
      database: 
        provider: postgre_name
        database_name: foo_api_db
        create_database: true
      cache: # optional
        type: memory # required
      ports: [7000] # optional (random if not set)
      server: 
        provider: myNginxServer # optional
      logging: serilog
   - bar_api:
      type: dotnet_web_api
      name: MyBarApi
      swagger: true
      database: 
        provider: postgre_name
        database_name: bar_api_db
        create_database: true
      cache:
        type: redis
        redis_options: 
          redis_server: my_redis
          redis_instance_name: my_common_redis_cache
      eventbus: 
        provider: rabbit_name
      ports: [8000]
      server: 
        provider: myNginxServer 
      logging: serilog
      authorization:
        issuer: myIdentityService
        secret: myIdentityService_bar_secret
        avaliable_scopes:
         - "openid"
         - "profile"
         - "email"
         - "bar_api_read"
         - "bar_api_write"
         - "bar_api_fullaccess"
        user_claims: # claims that is avaliable for user profile
         - "sub"
         - "updated_at"
         - "iat"
         - "amr"
         - "sid"
         - "jti"
         - "client_id"
         - "scope"
         - "role"
         - "id"
         - "exp"
         - "aud"
         - "name"
         - "given_name"
         - "family_name"
         - "middle_name"
         - "nickname"
         - "preferred_username"
         - "profile"
         - "picture"
         - "email_verified"
         - "email"
clients: 
   - web_1:
      type: web_angular_6
      name: myAngularClient
      add_npm_packages:
       - name: '@ngrx/store'
         version: '6.0.1'
      authorization: # using angular-oidc-client library
        issuer: myIdentityService
        scopes: 
         - openid
         - email
         - profile
         - foo_api_fullaccess
         - bar_api_readonly
      ports: [4200]
      server: 
        provider: myNginxServer # optional
   - web_2:
      type: web_react_16
      name: myReactClient
      authorization: # using angular-oidc-client library
        issuer: myIdentityService
        scopes: 
         - openid
         - email
         - profile
         - foo_api_fullaccess
         - bar_api_readonly
      ports: [4100]
      server: 
        provider: myNginxServer # optional

      