version: 0.1

servers: 
   - nginx_instance_v1:
      type: nginx
      name : my_proxy_server
      ports: [80,443] # Expose HTTP and HTTPS ports

databases:
   - postgresql_instance_v1:
      type: postgresql
      name: postgre_name
      ports: [6379]
      dockerc:
        image: postgres
        container_name: my_postgre_container
        volumes:
           - ./postgres-data:/var/lib/postgresql/data
        environment:
          POSTGRES_PASSWORD: machine
          POSTGRES_USER: doom
          POSTGRES_DB: dev
   - redis_instance_v1:
      name: my_redis
      type: redis
      user: 
        username: doom
        password: machine
      ports: [6379]
eventbus:
   - rabbitmq_instance_v1:
      type: rabbitmq
      name: rabbit_name
      dockerc:
        image: rabbitmq:3-management-alpine
        container_name: rabbitmqc
        volumes:
          - rabbit-volume:/var/lib/rabbitmq
        ports:
          - "15672:15672"
          - "5672:5672"
          - "5671:5671"
        environment:
          RABBITMQ_DEFAULT_PASS: machine
          RABBITMQ_DEFAULT_USER: doom
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:15672"]
          interval: 30s
          timeout: 10s
          retries: 5  
identity_services:
   - identityserver_v1:
      type: identityserver4
      name: my_identity_name
      eventbus: 
        bus: rabbitmq_instance_v1
        with: masstransit
      ports: [5000]
      docker_options:
        build: in_container # OR in_dev_machine(copy publish directory)
      logger: "serilog"
      database: 
        provider: postgresql_instance_v1
        database_name: my_identity_db
        create_database: true
        seed_admin_account: true
        admin_account:
          email: admin@admin.com
          password: DooMachine-1
          roles:
           - superadmin
           - admin
api_services: 
   - foo_api:
      type: dotnet_web_api
      name: my_foo_api
      docker_options:
        build: in_container # OR in_dev_machine(copy publish directory)
      eventbus: 
        bus_instance: rabbitmq_instance_v1
        implement_with: masstransit
      authorization:
        issuer: identityserver_v1
        api_secret: identityserver_v1_secret
        avaliable_scopes:
         - openid
         - profile
         - email
         - foo_api_read
         - foo_api_write
         - foo_api_fullaccess
      database: 
        provider: postgresql_instance_v1
        database_name: my_identity_db
        create_database: true
      cache:
        type: memory
      ports: [7000]
      logger: "serilog"
   - bar_api:
      type: dotnet_web_api
      name: MyBarApi
      authorization:
        issuer: identityserver_v1
        secret: identityserver_v1_secret
        avaliable_scopes:
         - openid
         - profile
         - email
         - foo_api_read
         - foo_api_write
         - foo_api_fullaccess
      database: 
        provider: postgresql_instance_v1
        database_name: bar_api_db
        context_name: BarApiContext
        create_database: true
      cache:
        type: redis
        redis_options: 
          redis_server: redis_instance_v1
          redis_instance_name: master
      eventbus: 
        bus_instance: rabbitmq_instance_v1
      ports: [7000]
      logger: "serilog"
clients: 
   - web_1:
      type: angular
      name: my_angular_client
      add_npm_packages:
       - name: '@ngrx/store'
         version: '6.0.1'
      identity: # using angular-oidc-client library
        issuer: identityserver_v1
        flow: implicit
        scopes: 
         - foo_api_fullaccess
         - bar_api_readonly
      ports: [4200]

      